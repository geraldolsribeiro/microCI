---
steps:
  - name: "Extract documentation"
    description: "Extract documentation from source code to a markdown file"
    plugin:
      name: "docmd"
      items:
        # - [ 'c++',  'input_filename.cpp', 'output_filename_cpp.md' ]
        - [ 'yaml', 'new/bash.yml', 'docs/plugin_bash.md' ]
        - [ 'yaml', 'new/beamer.yml', 'docs/plugin_beamer.md' ]
        - [ 'yaml', 'new/clang-format_config.yml', 'docs/plugin_clang-format_config.md' ]
        - [ 'yaml', 'new/clang-format.yml', 'docs/plugin_clang-format.md' ]
        - [ 'yaml', 'new/clang-tidy.yml', 'docs/plugin_clang-tidy.md' ]
        - [ 'yaml', 'new/cppcheck.yml', 'docs/plugin_cppcheck.md' ]
        - [ 'yaml', 'new/fetch2.yml', 'docs/plugin_fetch2.md' ]
        - [ 'yaml', 'new/fetch.yml', 'docs/plugin_fetch.md' ]
        - [ 'yaml', 'new/git_deploy.yml', 'docs/plugin_git_deploy.md' ]
        - [ 'yaml', 'new/git_publish.yml', 'docs/plugin_git_publish.md' ]
        - [ 'yaml', 'new/minio.yml', 'docs/plugin_minio.md' ]
        - [ 'yaml', 'new/mkdocs_material_config.yml', 'docs/plugin_mkdocs_material_config.md' ]
        - [ 'yaml', 'new/mkdocs_material.yml', 'docs/plugin_mkdocs_material.md' ]
        - [ 'yaml', 'new/npm.yml', 'docs/plugin_npm.md' ]
        - [ 'yaml', 'new/pandoc.yml', 'docs/plugin_pandoc.md' ]
        - [ 'yaml', 'new/plantuml.yml', 'docs/plugin_plantuml.md' ]
        - [ 'yaml', 'new/skip.yml', 'docs/plugin_skip.md' ]
  - name: "Gerar relatório de verificação do código C++ clang-tidy"
    description: "Verifica o código C++ e gera relatório em formato HTML"
    network: bridge
    only: clang-tidy
    plugin:
      name: "clang-tidy"
      options:
        - "-std=c++17"
      include:
        - "/usr/include/"
        - "include/"
      source:
        - "src/*pp"
        - "include/*pp"

  - name: "Gerar relatório de verificação do código C++ cppcheck"
    plugin:
      name: "cppcheck"
      include:
        - "include"
      source:
        - "src"
        - "test"
      platform: "unix64"
      std: "c++17"

  - name: "SAST com flawfinder"
    description: "Analisa estaticamente o código fonte com a ferramenta flawfinder"
    plugin:
      name: "flawfinder"
      source:
        - "src/*.cpp"
        - "include/*Parser.hpp"
        - "include/MicroCI*.hpp"

  - name: "Converter pdf em jpg"
    description: "Descrição deste passo"
    docker: intmain/microci_poppler:latest
    plugin:
      name: "bash"
      sh: |
        cd docs/assets
        pdftoppm repository-open-graph.pdf repository-open-graph -jpeg

  - name: "Build diagrams - plantuml"
    description: "Build diagrams from textual description"
    plugin:
      name: "plantuml"
      source:
        - "docs/**.puml"
      type: png
      config: "docs/diagrams/skinparams.iuml"
      output: "/microci_workspace/docs/diagrams"

  - name: "Build diagrams - pikchr"
    description: "Build diagrams from textual description"
    only: O
    plugin:
      name: "pikchr"
      source:
        - "docs/diagrams/*.pikchr"
      type: svg
      output_folder: "docs/diagrams/"

  - name: "Construir documentação em formato HTML"
    description: "Documentação do projeto"
    plugin:
      name: "mkdocs_material"
      action: "build"

  - name: "Servidor local na porta 8000 (Ctrl+C para finalizar)"
    description: "Executa servidor local para preview da documentação"
    only: "serve"
    plugin:
      name: "mkdocs_material"
      action: "serve"

  - name: "Configurar github pages"
    description: "Configura domínio Apex para github pages, arquivo README e ajusta usuário"
    plugin:
      name: bash
      bash: |
        mkdir -p site/
        cp github-pages/CNAME site/
        cat docs/index.md > README.md
        # Disponibiliza uma página de rosto para o github
        cp README.md site/

  - name: "Gerar PDF a partir do Markdown"
    description: "Descrição deste passo"
    plugin:
      name: pandoc
      input:
        - README.md
      output: README.pdf

  - name: "Publicar documentação em microci.dev"
    network: bridge
    ssh:
    plugin:
      name: "git_publish"
      git_url: "git@github.com:geraldolsribeiro/microci.dev.git"
      branch: master

  - name: "Formatar código C++ com clang-format"
    description: "Padroniza formato do código usando regras"
    plugin:
      name: "clang-format"
      source: # Lista arquivos a serem formatados
        - "src/*.cpp"
        - "test/*.cpp"
        - "include/*.hpp"

  - name: "Baixar arquivos externos ao projeto"
    run_as: "root"
    description: "Download de dependências utilizadas na compilação"
    plugin:
      name: "fetch"
      target: include
      items:
        - url: https://raw.githubusercontent.com/adishavit/argh/master/argh.h
        - url: https://raw.githubusercontent.com/pantor/inja/master/single_include/inja/inja.hpp
        - url: https://raw.githubusercontent.com/Rookfighter/inifile-cpp/master/include/inicpp.h
        - url: https://raw.githubusercontent.com/nlohmann/json/develop/single_include/nlohmann/json.hpp
          target: include/nlohmann

  # - name: "Baixar spirit-po"
  #   description: "Download de dependências utilizadas na compilação"
  #   plugin:
  #     name: "fetch"
  #     target: include/spirit_po
  #     items:
  #       - url: https://raw.githubusercontent.com/garbageslam/spirit-po/master/include/spirit_po/catalog.hpp
  #       - url: https://raw.githubusercontent.com/garbageslam/spirit-po/master/include/spirit_po/catalog_metadata.hpp
  #       - url: https://raw.githubusercontent.com/garbageslam/spirit-po/master/include/spirit_po/default_plural_forms_compiler.hpp
  #       - url: https://raw.githubusercontent.com/garbageslam/spirit-po/master/include/spirit_po/default_plural_forms_expressions.hpp
  #       - url: https://raw.githubusercontent.com/garbageslam/spirit-po/master/include/spirit_po/exceptions.hpp
  #       - url: https://raw.githubusercontent.com/garbageslam/spirit-po/master/include/spirit_po/po_grammar.hpp
  #       - url: https://raw.githubusercontent.com/garbageslam/spirit-po/master/include/spirit_po/po_message.hpp
  #       - url: https://raw.githubusercontent.com/garbageslam/spirit-po/master/include/spirit_po/po_message_adapted.hpp
  #       - url: https://raw.githubusercontent.com/garbageslam/spirit-po/master/include/spirit_po/spirit_po.hpp
  #       - url: https://raw.githubusercontent.com/garbageslam/spirit-po/master/include/spirit_po/version.hpp

  - name: "Compilar versão estática do microCI"
    docker: "gcc:13"
    run_as: root # necessário para instalar as dependências
    network: host
    plugin:
      name: bash
      bash: |
        apt update
        apt upgrade -y
        apt install -y xxd libspdlog-dev libyaml-cpp-dev libcrypto++-dev gettext
        make -C src clean all
        make -C test
        chown $(id -u).$(id -g) -Rv bin/microCI
        chown $(id -u).$(id -g) -Rv test/

  - name: "Construir imagem docker microci_cppcheck"
    description: "Descrição deste passo"
    plugin:
      name: docker_build
      folder: dockerfiles/cppcheck/
      dockerfile: Dockerfile
      target: intmain/microci_cppcheck
      version: 0.3
      is_latest: true
      push: true

# vim: spell spelllang=pt,en nowrap
